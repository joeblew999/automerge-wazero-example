package automerge

import (
	"context"
	"fmt"
)

// Cursor represents a stable position in a text or list object.
// Cursors track positions that remain valid across concurrent edits.
//
// Unlike character indices which change when text is inserted/deleted,
// cursors maintain their logical position in the CRDT structure.
//
// Example use case:
// - User A has cursor at position 5 in "Hello"
// - User B inserts "Hi " at position 0
// - Text becomes "Hi Hello"
// - User A's cursor now points to position 8 (5 + 3)
type Cursor struct {
	// Path to the text or list object (e.g., "ROOT.content")
	Path string
	// Cursor string (opaque, generated by Automerge)
	Value string
}

// GetCursor creates a cursor at the given position in a text or list object.
//
// Parameters:
//   - ctx: Context for cancellation
//   - path: Object path (e.g., "ROOT.content")
//   - index: Position in the object (character index for text, item index for lists)
//
// Returns:
//   - Cursor with the path and cursor value
//   - Error if path is invalid or index is out of bounds
func (d *Document) GetCursor(ctx context.Context, path string, index int) (*Cursor, error) {
	if d.runtime == nil {
		return nil, fmt.Errorf("document not initialized")
	}

	cursorValue, err := d.runtime.GetCursor(ctx, path, index)
	if err != nil {
		return nil, fmt.Errorf("failed to get cursor: %w", err)
	}

	return &Cursor{
		Path:  path,
		Value: cursorValue,
	}, nil
}

// LookupCursor finds the current position of a cursor.
//
// Parameters:
//   - ctx: Context for cancellation
//   - cursor: Cursor to look up
//
// Returns:
//   - Current position (index) of the cursor
//   - Error if cursor is invalid or not found
func (d *Document) LookupCursor(ctx context.Context, cursor *Cursor) (int, error) {
	if d.runtime == nil {
		return 0, fmt.Errorf("document not initialized")
	}

	if cursor == nil {
		return 0, fmt.Errorf("cursor is nil")
	}

	index, err := d.runtime.LookupCursor(ctx, cursor.Path, cursor.Value)
	if err != nil {
		return 0, fmt.Errorf("failed to lookup cursor: %w", err)
	}

	return index, nil
}

// String returns a string representation of the cursor.
func (c *Cursor) String() string {
	if c == nil {
		return "<nil cursor>"
	}
	return fmt.Sprintf("Cursor{path=%s, value=%s}", c.Path, c.Value)
}
